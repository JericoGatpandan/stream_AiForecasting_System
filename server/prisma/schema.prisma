// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FloodCharacteristics {
  id                           String   @id @default(cuid())
  location                     String
  latitude                     Float
  longitude                    Float
  maximumDepth                 Float    @map("maximum_depth")
  maximumDepthUncertainty      Float    @map("maximum_depth_uncertainty")
  peakVelocity                 Float    @map("peak_velocity")
  peakVelocityUncertainty      Float    @map("peak_velocity_uncertainty")
  arrivalTime                  Float    @map("arrival_time")
  arrivalTimeUncertainty       Float    @map("arrival_time_uncertainty")
  inundationArea               Float    @map("inundation_area")
  inundationAreaUncertainty    Float    @map("inundation_area_uncertainty")
  floodRiskLevel              FloodRiskLevel @default(LOW) @map("flood_risk_level")
  modelVersion                String   @default("v1.0") @map("model_version")
  lastUpdated                 DateTime @default(now()) @map("last_updated")
  isActive                    Boolean  @default(true) @map("is_active")
  expertAnalysis              String?  @map("expert_analysis")
  recommendedActions          String?  @map("recommended_actions")
  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")

  @@map("flood_characteristics")
  @@index([location])
  @@index([floodRiskLevel])
  @@index([isActive])
}

model WeatherData {
  id              String   @id @default(cuid())
  location        String
  latitude        Float
  longitude       Float
  temperature     Float
  humidity        Float
  windSpeed       Float    @map("wind_speed")
  windDirection   String   @map("wind_direction")
  precipitation   Float
  pressure        Float
  visibility      Float
  uvIndex         Float    @map("uv_index")
  condition       String
  timestamp       DateTime @default(now())
  isActive        Boolean  @default(true) @map("is_active")
  
  @@map("weather_data")
  @@index([location])
  @@index([timestamp])
}

model WeatherAlert {
  id          String      @id @default(cuid())
  type        AlertType
  severity    Severity
  title       String
  description String
  location    String?
  latitude    Float?
  longitude   Float?
  startTime   DateTime    @map("start_time")
  endTime     DateTime    @map("end_time")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  @@map("weather_alerts")
  @@index([location])
  @@index([isActive])
}

model Sensor {
  id        String   @id @default(cuid())
  name      String
  barangay  String
  latitude  Float
  longitude Float
  status    SensorStatus @default(ACTIVE)
  readings  Json     // Store sensor readings as JSON
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("sensors")
  @@index([barangay])
  @@index([status])
}

enum FloodRiskLevel {
  LOW
  MODERATE
  HIGH
  EXTREME
}

enum AlertType {
  WARNING
  WATCH
  ADVISORY
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  EXTREME
}

enum SensorStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  ERROR
}